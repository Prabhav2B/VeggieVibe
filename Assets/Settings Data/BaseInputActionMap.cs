//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings Data/BaseInputActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BaseInputActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BaseInputActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BaseInputActionMap"",
    ""maps"": [
        {
            ""name"": ""Player Actions"",
            ""id"": ""44626dfe-8eca-453f-a863-343083e0ec3c"",
            ""actions"": [
                {
                    ""name"": ""Primary Contact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""003812a3-1ee8-4d9a-829e-8fb617b5cce6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3d69b948-d9f0-47e9-8734-31b13931d404"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Tap"",
                    ""type"": ""Button"",
                    ""id"": ""f582d976-92af-4442-b64b-c45e6cd88a0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Hold"",
                    ""type"": ""Button"",
                    ""id"": ""c6dbfa55-b745-4b6d-a378-909733801cf4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b5ff980-7811-459c-b298-e553ee93cf40"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseInteraction"",
                    ""action"": ""Primary Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6f44b55-3746-46dc-a123-3f4c94335b66"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseInteraction"",
                    ""action"": ""Primary Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2bb780a-b453-4627-b779-b998005b05c6"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e80fb6b3-a710-45c8-81a6-d1eed4c29e33"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BaseInteraction"",
            ""bindingGroup"": ""BaseInteraction"",
            ""devices"": []
        }
    ]
}");
        // Player Actions
        m_PlayerActions = asset.FindActionMap("Player Actions", throwIfNotFound: true);
        m_PlayerActions_PrimaryContact = m_PlayerActions.FindAction("Primary Contact", throwIfNotFound: true);
        m_PlayerActions_PrimaryPosition = m_PlayerActions.FindAction("Primary Position", throwIfNotFound: true);
        m_PlayerActions_PrimaryTap = m_PlayerActions.FindAction("Primary Tap", throwIfNotFound: true);
        m_PlayerActions_PrimaryHold = m_PlayerActions.FindAction("Primary Hold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Actions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_PrimaryContact;
    private readonly InputAction m_PlayerActions_PrimaryPosition;
    private readonly InputAction m_PlayerActions_PrimaryTap;
    private readonly InputAction m_PlayerActions_PrimaryHold;
    public struct PlayerActionsActions
    {
        private @BaseInputActionMap m_Wrapper;
        public PlayerActionsActions(@BaseInputActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_PlayerActions_PrimaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_PlayerActions_PrimaryPosition;
        public InputAction @PrimaryTap => m_Wrapper.m_PlayerActions_PrimaryTap;
        public InputAction @PrimaryHold => m_Wrapper.m_PlayerActions_PrimaryHold;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @PrimaryContact.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryContact;
                @PrimaryPosition.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryTap.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryTap;
                @PrimaryTap.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryTap;
                @PrimaryTap.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryTap;
                @PrimaryHold.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryHold;
                @PrimaryHold.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryHold;
                @PrimaryHold.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPrimaryHold;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                @PrimaryTap.started += instance.OnPrimaryTap;
                @PrimaryTap.performed += instance.OnPrimaryTap;
                @PrimaryTap.canceled += instance.OnPrimaryTap;
                @PrimaryHold.started += instance.OnPrimaryHold;
                @PrimaryHold.performed += instance.OnPrimaryHold;
                @PrimaryHold.canceled += instance.OnPrimaryHold;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);
    private int m_BaseInteractionSchemeIndex = -1;
    public InputControlScheme BaseInteractionScheme
    {
        get
        {
            if (m_BaseInteractionSchemeIndex == -1) m_BaseInteractionSchemeIndex = asset.FindControlSchemeIndex("BaseInteraction");
            return asset.controlSchemes[m_BaseInteractionSchemeIndex];
        }
    }
    public interface IPlayerActionsActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnPrimaryTap(InputAction.CallbackContext context);
        void OnPrimaryHold(InputAction.CallbackContext context);
    }
}
